//
// This is a generated file, do not edit!
// Generated by BuildConfig.swift, see https://github.com/417-72KI/BuildConfig.swift
//

import Foundation

struct BuildConfig: Codable {
    static let `default`: BuildConfig = .load()

    let API: API
    let boot: Boot
    let environment: String
    let isDebug: Bool
    let license: [String]
    let pi: Double
    let token: Int

    enum CodingKeys: String, CodingKey {
        case API
        case boot
        case environment
        case isDebug
        case license
        case pi
        case token
    }
}

private extension BuildConfig {
    static func load() -> BuildConfig {
        load(from: rawData)
    }
}

extension BuildConfig {
    static func load(from filePath: String) -> BuildConfig {
        do {
            let data = try Data(contentsOf: URL(fileURLWithPath: filePath))
            return load(from: data)
        } catch {
            fatalError("\(filePath) is invalid. cause: \(error)")
        }
    }

    static func load(from data: Data) -> BuildConfig {
        do {
            return try PropertyListDecoder().decode(BuildConfig.self, from: data)
        } catch {
            fatalError("Invalid data (\(String(data: data, encoding: .utf8) ?? ""). cause: \(error)")
        }
    }
}

extension BuildConfig {
    struct API: Codable {
        let domain: String
        let path: Path

        enum CodingKeys: String, CodingKey {
            case domain
            case path
        }
    }
}

extension BuildConfig.API {
    struct Path: Codable {
        let login: Login

        enum CodingKeys: String, CodingKey {
            case login
        }
    }
}

extension BuildConfig.API.Path {
    struct Login: Codable {
        let method: String
        let path: String

        enum CodingKeys: String, CodingKey {
            case method
            case path
        }
    }
}

extension BuildConfig {
    struct Boot: Codable {
        let message: String

        enum CodingKeys: String, CodingKey {
            case message
        }
    }
}

private let rawData = Data(base64Encoded: "YnBsaXN0MDDXAQIDBAUGBwgJCg4YGxxVdG9rZW5ScGlXbGljZW5zZVNBUElUYm9vdFtlbnZpcm9ubWVudFdpc0RlYnVnEgAB4kAjQAkh+1RELRGjCwwNVFlhbWxXUGF0aEtpdF8QD1N0ZW5jaWxTd2lmdEtpdNIPEBEXVHBhdGhWZG9tYWlu0RITVWxvZ2lu0g8UFRZWbWV0aG9kVi9sb2dpblRQT1NUXxASaHR0cDovLzE5Mi4xNjguMC4x0RkaV21lc3NhZ2VdSGVsbG8sIFdvcmxkIVtkZXZlbG9wbWVudAgIFx0gKCwxPUVKU1dcZHZ7gIeKkJWco6i9wMjW4gAAAAAAAAEBAAAAAAAAAB0AAAAAAAAAAAAAAAAAAADj")!
